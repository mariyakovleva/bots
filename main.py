# #!/usr/bin/python
# ## -*- coding: utf-8 -*-
import telebot
import config 
import threading 
import buttons
import os 

administrators = (842234154,)
users = {}
users_text = {}
users_text_2 = {}
my_poll = {} 

poll_1 = {} 
poll_2 = {} 
poll_3 = {} 
poll_4 = {} 
poll_5 = {} 
poll_6 = {} 
poll_7 = {} 
poll_8 = {} 
poll_9 = {} 
poll_10 = {} 
poll_11 = {} 
poll_12 = {} 
poll_13 = {} 
poll_14 = {} 
poll_15 = {} 

bot = telebot.TeleBot(config.TOKEN, threaded = True)

@bot.message_handler(commands = ['start'])
def start_msg(message):
    bot.send_message(message.chat.id, 
    f'''*{message.chat.first_name}*! 
    –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–∞–±–æ—Ç—ã —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã—Ö –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π –∫–æ–º–ø–∞–Ω–∏–∏ ¬´–¢—Ä–∞–Ω—Å–Ω–µ—Ñ—Ç—å—ç–Ω–µ—Ä–≥–æ¬ª! üìä‚ú®
    –ú—ã —Å—Ç—Ä–µ–º–∏–º—Å—è –∫ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–º—É —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏—é –∏ —Ä–∞–∑–≤–∏—Ç–∏—é. –° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –í—ã —Å–º–æ–∂–µ—Ç–µ:
        ‚úÖ–û—Ü–µ–Ω–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π.
        ‚úÖ–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º –º–Ω–µ–Ω–∏–µ–º –∏ –æ–ø—ã—Ç–æ–º.
    –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:
        üî•–í—Å–µ –æ—Ç–≤–µ—Ç—ã *–∞–Ω–æ–Ω–∏–º–Ω—ã –∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã*.
        üî•–í–∞—à–∏ –æ—Ç–∑—ã–≤—ã –ø–æ–º–æ–≥—É—Ç –Ω–∞–º –≤—ã—è–≤–∏—Ç—å —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –∏ –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è.
    –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç–µ –Ω–∞–º —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –ª—É—á—à–µ! üåü
    ''', parse_mode = "Markdown", reply_markup = buttons.Main_menu())


##------ –î–µ–∫–æ—Ä–∞—Ç–æ—Ä (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π) –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–û–ô –∫–ª–∏–≤–∏–∞—Ç—É—Ä—ã 
@bot.message_handler(func=lambda message: message.text == '–û—Ü–µ–Ω–∏—Ç—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ üè¢')
def review_SP(message):
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ:', reply_markup = buttons.review_SP())

@bot.message_handler(func=lambda message: message.text == '–û—Ü–µ–Ω–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ üôé‚Äç‚ôÇÔ∏è')
def write_to_support(message):
    bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –í—ã –±—ã —Ö–æ—Ç–µ–ª–∏ –æ—Ü–µ–Ω–∏—Ç—å:')
    users[message.chat.id] = {}
    bot.register_next_step_handler(message, save_msg_text)
 
def save_msg_text(message):
    users[message.chat.id]['emploee'] = message.text
    bot.send_message(message.chat.id, f'–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!')

def save_msg_text(message):
    users[message.chat.id]['emploee'] = message.text
    keyboard = telebot.types.InlineKeyboardMarkup()
    button_save = telebot.types.InlineKeyboardButton(text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data='save_data')
    button_change = telebot.types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å", callback_data='change_data')
    keyboard.add(button_save, button_change)
    bot.send_message(message.chat.id, f'–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ?', reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data == 'save_data')
def save_btn(call):
    message = call.message
    message_id = message.message_id
    bot.answer_callback_query(call.id, text="–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    bot.delete_message(chat_id=message.chat.id, message_id=message_id)
    bot.send_message(message.chat.id, '–£–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –í–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –≤ –µ–≥–æ/–µ—ë —Ä–∞–±–æ—Ç–µ, –∏ —á—Ç–æ, –ø–æ –í–∞—à–µ–º—É –º–Ω–µ–Ω–∏—é, –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å. –ü–æ—Å—Ç–∞–≤—å—Ç–µ –±–∞–ª–ª –æ—Ç 1 –¥–æ 10:')
    bot.register_next_step_handler(message, send_feedback_administrators)

def send_feedback_administrators(message):
    feedback = message.text
    user = users[message.chat.id]
    emploee = user['emploee']
    for admin_chat_id in administrators:
        bot.send_message(admin_chat_id, f'{feedback} –æ—Å—Ç–∞–≤–∏–ª –º–Ω–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É: {emploee}')
    bot.send_message(message.chat.id, f'–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ *—Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã*!', parse_mode = "Markdown") #reply_markup = ls_keyboards()

@bot.callback_query_handler(func=lambda call: call.data == 'change_data')
def save_btn(call):
    message = call.message
    message_id = message.message_id
    bot.edit_message_text(chat_id=message.chat.id, message_id=message_id, text='–ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö!')
    write_to_support(message)

@bot.message_handler(func=lambda message: message.text == '–ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å üìä')
def pool_X(message):
    bot.send_message(message.chat.id, '*–ï—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–º–µ–Ω–∏—Ç—å –≥–æ–ª–æ—Å:*\n\t1. –ö–ª–∏–∫–Ω–∏—Ç–µ –æ–¥–∏–Ω —Ä–∞–∑ –ø–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—é.'\
            '\n\t2. –í –ø–æ—è–≤–∏–≤—à–µ–º—Å—è –º–µ–Ω—é –≤—ã–±–µ—Ä–∏—Ç–µ "–û—Ç–º–µ–Ω–∏—Ç—å –≥–æ–ª–æ—Å".\n\t3. –ü–µ—Ä–µ–≥–æ–ª–æ—Å—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ.', parse_mode = "Markdown")
    if my_poll == {}:
        pool_X = bot.send_poll(message.chat.id, question = f'–û–±—Ä–∞—â–∞–µ—Ç–µ—Å—å –ª–∏ –í—ã –∫ –∫–ª—é—á–µ–≤—ã–º –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–≤–∞–Ω–∏–∏ üìû–¢–µ–ª–µ—Ñ–æ–Ω–Ω–æ–≥–æ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –¢–ù–≠?',
            options = ['–î–∞', '–ù–µ—Ç'], is_anonymous = 0, allows_multiple_answers = 0)
        my_poll['ls'] = [message.chat.id, pool_X.message_id] 
        # print(my_poll) 
    else: 
        bot.forward_message(message.chat.id, my_poll['ls'][0], my_poll['ls'][1])

@bot.message_handler(func=lambda message: message.text == '–í—ã—Å–∫–∞–∑–∞—Ç—å —Å–≤–æ—ë –º–Ω–µ–Ω–∏–µ üôã')
def say_mind(message):
    bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –í–∞—à –æ—Ç–∑—ã–≤ –æ —Ä–∞–±–æ—Ç–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è üåü\n'
        '–£–∫–∞–∂–∏—Ç–µ –ù–ê–ó–í–ê–ù–ò–ï –ü–û–î–†–ê–ó–î–ï–õ–ï–ù–ò–Ø üí•\n'
        '–ß—Ç–æ –í–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è? –ß—Ç–æ —Å—Ç–æ–∏—Ç —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å? ü§î:')
    users_text[message.chat.id] = {}
    bot.register_next_step_handler(message, send_feedback_administrators_1)

def send_feedback_administrators_1(message):
    users_text[message.chat.id]['usertext'] = message.text
    for admin_chat_id in administrators:
        bot.send_message(admin_chat_id, f'{users_text}')
    bot.send_message(message.chat.id, f'–í–∞—à–∏ –æ—Ç–∑—ã–≤—ã –≤–∞–∂–Ω—ã –¥–ª—è –Ω–∞—Å. –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —É—á–∞—Å—Ç–∏–µ! üöÄ') #reply_markup = ls_keyboards()

@bot.message_handler(func=lambda message: message.text == '–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏–µ üìà')
def add_offer(message):
    bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –í–∞—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Ä–∞–±–æ—Ç—ã üìà\n'
        '–ú—ã –≥–æ—Ç–æ–≤—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –ª—é–±—ã–µ –∏–¥–µ–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ–≤—ã—Å–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç—ã:')
    users_text[message.chat.id]= {}
    bot.register_next_step_handler(message, send_feedback_administrators_1)

def send_feedback_administrators_2(message):
    users_text_1[message.chat.id]['usertext'] = message.text
    for admin_chat_id in administrators:
        bot.send_message(admin_chat_id, f'{users_text_1}')
    bot.send_message(message.chat.id, f'–í–∞—à –≤–∫–ª–∞–¥ –≤–∞–∂–µ–Ω –¥–ª—è –Ω–∞—Å. –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ! üöÄ') #reply_markup = ls_keyboards()

@bot.message_handler(func=lambda message: message.text == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç—á–µ—Ç—ã üìë')
def sent_develop(message):
    ls_img = {'1': '–†–µ–π—Ç–∏–Ω–≥ –∫–ª–∏–µ–Ω—Ç–æ—Ü–µ–Ω—Ç—Ä–∏—á–Ω–æ—Å—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã—Ö –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π –û–±—â–µ—Å—Ç–≤–∞', '2': '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —Ä–∞–∑—Ä–µ–∑–µ –º–µ—Å—è—Ü–µ–≤'}
    for key, value in ls_img.items():
        with open((os.path.abspath(f'images/{key}.jpg')), 'rb') as file:
            bot.send_photo(message.chat.id, file.read(), caption = f'{value}')

@bot.message_handler(func=lambda message: message.text == '–ù–∞–ø–∏—Å–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É ‚ùì')
def sent_develop(message):
    bot.send_message(message.chat.id, '–ú—ã –±—É–¥–µ–º —Ä–∞–¥—ã —É—Å–ª—ã—à–∞—Ç—å –í–∞—à–∏ –∏–¥–µ–∏, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å—ã‚úÖ'
        '\n–í—Å–µ –≤–∞—à–∏ –æ—Ç–∑—ã–≤—ã –ø–æ–º–æ–≥—É—Ç –Ω–∞–º —É–ª—É—á—à–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞ –∏ —Å–¥–µ–ª–∞—Ç—å –µ–≥–æ –µ—â–µ —É–¥–æ–±–Ω–µ–µüöÄ'
        '\n–ö–æ–Ω—Ç–∞–∫—Ç: @Mari_YakovlevM ')

##------–î–µ–∫–æ—Ä–∞—Ç–æ—Ä (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π) –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–ª–∏–≤–∏–∞—Ç—É—Ä—ã 
@bot.callback_query_handler(func = lambda msg: True)
def callback_Func(callback_query):
    message = callback_query.message
    text = callback_query.data

    # ------------------------- —Ä–∞–∑–¥–µ–ª "–û—Ü–µ–Ω–∏—Ç—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ" ----------------------------
    def pool_review_SP(arg_text, arg_poll_result):
        bot.send_message(message.chat.id, '*–ï—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–º–µ–Ω–∏—Ç—å –≥–æ–ª–æ—Å:*\n\t1. –ö–ª–∏–∫–Ω–∏—Ç–µ –æ–¥–∏–Ω —Ä–∞–∑ –ø–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—é.'\
                '\n\t2. –í –ø–æ—è–≤–∏–≤—à–µ–º—Å—è –º–µ–Ω—é –≤—ã–±–µ—Ä–∏—Ç–µ "–û—Ç–º–µ–Ω–∏—Ç—å –≥–æ–ª–æ—Å".\n\t3. –ü–µ—Ä–µ–≥–æ–ª–æ—Å—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ.', parse_mode = "Markdown")
        if arg_poll_result == {}:
            my_poll = bot.send_poll(message.chat.id, question = f'–†–µ–∞–ª–∏–∑—É–µ—Ç –ª–∏ {arg_text} —Ç–≤–æ–∏ –∂–µ–ª–∞–Ω–∏—è?',
                options = ['10 üòá', '9 üî•', '8 ü§î', '7 üòë', '6 üôÅ', '5 ‚òπÔ∏è', '4 üò†', '3 üò°', '2 ü§¨'], is_anonymous = 1, allows_multiple_answers = 0)
            arg_poll_result['ls'] = [message.chat.id, my_poll.message_id] 
            # print(my_poll)
        else: 
            bot.forward_message(message.chat.id, arg_poll_result['ls'][0], arg_poll_result['ls'][1])


    if '–ü–≠–û' in text:
        pool_review_SP(text, poll_1)
   
    if '–°–ò–ë' in text:
        pool_review_SP(text, poll_2)

    if '–û–ò' in text: 
        pool_review_SP(text, poll_3)

    if '–û–°–î –†–†–≠' in text:
        pool_review_SP(text, poll_4)
   
    if '–°–ü–£–§' in text: 
        pool_review_SP(text, poll_5)

    if '–û–ë' in text: 
        pool_review_SP(text, poll_6)

    if '–û–£–ü' in text: 
        pool_review_SP(text, poll_7)

    if '–û–°–î –û–†–≠' in text: 
        pool_review_SP(text, poll_8)
       
    if '–°–û–ü–¢' in text: 
        pool_review_SP(text, poll_9)

    if '–û–î' in text: 
        pool_review_SP(text, poll_10)

    if '–û–ê–ó–ò' in text: 
        pool_review_SP(text, poll_11)

    if '–°–ö–û–í' in text: 
        pool_review_SP(text, poll_12)
       
    if '–û–û–ü–î' in text: 
        pool_review_SP(text, poll_13)

    if '–°–≠–ú' in text: 
        pool_review_SP(text, poll_14)

    if '–°–ü–ü–ë–û–¢' in text: 
        pool_review_SP(text, poll_15)


# ------------------------------------------------------------------------------------
if __name__ == '__main__':
    def runBot():
        bot.polling(none_stop = True, interval = 0, timeout = 100)

    t1 = threading.Thread(target = runBot)
    t1.start()

